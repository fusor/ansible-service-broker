---

- name: Converge
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'crds/osb_v1_automationbroker_cr.yaml'])) | from_yaml }}"
  tasks:
  - block:
    - name: Set Operator Image from Format
      shell: "echo $IMAGE_FORMAT | envsubst '${component}'"
      environment:
        component: ansible-service-broker-operator
      register: operator_image_raw

    - name: Set Operand Image f_om Format
      shell: "echo $IMAGE_FORMAT | envsubst '${component}'"
      environment:
        component: ansible-service-broker
      register: operand_image_raw

    - name: Create the Operator Deployment
      k8s:
        namespace: '{{ namespace }}'
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) }}"
      vars:
        operator_image: '{{ operator_image_raw.stdout }}'
        operand_image: '{{ operand_image_raw.stdout }}'

    - name: Create the osb.openshift.io/v1.AnsibleServiceBroker
      k8s:
        state: present
        namespace: '{{ namespace }}'
        definition: "{{ custom_resource }}"

    - name: Wait 10m for reconciliation to run
      k8s_facts:
        api_version: '{{ custom_resource.apiVersion }}'
        kind: '{{ custom_resource.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ custom_resource.metadata.name }}'
      register: cr
      until:
      - "'Successful' in (cr | json_query('resources[].status.conditions[].reason'))"
      delay: 10
      retries: 60
    rescue:
    - name: debug cr
      ignore_errors: yes
      failed_when: false
      debug:
        var: debug_cr
      vars:
        debug_cr: '{{ lookup("k8s",
          kind=custom_resource.kind,
          api_version=custom_resource.apiVersion,
          namespace=namespace,
          resource_name=custom_resource.metadata.name
        )}}'
    - name: get operator logs
      ignore_errors: yes
      failed_when: false
      command: kubectl logs deployment/{{ definition.metadata.name }} -n {{ namespace }}
      environment:
        KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
      vars:
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
      register: log

    - debug: var=log.stdout_lines

    - fail:
        msg: "Failed on action: converge"

- import_playbook: "{{ playbook_dir }}/verify.yml"
