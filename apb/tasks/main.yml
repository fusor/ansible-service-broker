---

- name: Debug important facts
  debug:
    msg:
      - "broker_local_openshift_enabled {{ broker_local_openshift_enabled }}"

- name: Verify the broker has no outstanding service instances if deprovisioning
  assert:
    that:
      - "lookup('k8s', kind='BundleInstance', namespace=broker_namespace, api_version='automationbroker.io/v1alpha1') | length == 0"
    msg: |
      The requested broker cannot be deprovisioned because it has outstanding service instances.
      Please deprovision any services originally provisioned by this broker before deprovisioning the broker itself.
  when: state == 'absent' and not broker_force_deprovision

- name: 'Set broker namespace state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'broker.namespace.yaml') | from_yaml }}"
  when: create_broker_namespace

- name: Verify preconditions
  assert:
    that:
      - '"servicecatalog.k8s.io" in lookup("k8s", cluster_info="api_groups")'
      - 'lookup("k8s", kind="Namespace", resource_name=broker_namespace) is defined'
    msg: |
      Service Catalog must be installed in the cluster
      The broker namespace must exist
  when: state == 'present'

- include_tasks: "dao_{{ broker_dao_type }}.yaml"
- include_tasks: "generate_certificate.yaml"
  when: ('route.openshift.io' not in lookup('k8s', cluster_info='api_groups')) | bool

- name: 'Set broker objects state={{ state }}'
  k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', item.name) | from_yaml }}"
  when: item.apply | default(True)
  loop:
    - name: broker.service.yaml
    - name: broker.route.yaml
      apply: "{{ ('route.openshift.io' in lookup('k8s', cluster_info='api_groups')) | bool }}"
    - name: broker-redirector.route.yaml
      apply: "{{ ('route.openshift.io' in lookup('k8s', cluster_info='api_groups')) | bool }}"
    - name: broker.serviceaccount.yaml
    - name: broker.clusterrolebinding.yaml
    - name: broker.configmap.yaml
    - name: broker-auth.clusterrole.yaml
      apply: "{{ state == 'present' or (state == 'absent' and (broker_destroy_shared_resources | bool)) }}"
    - name: broker-auth.clusterrolebinding.yaml
    - name: broker-client.serviceaccount.yaml
    - name: broker-client.secret.yaml
    - name: broker-client.clusterrolebinding.yaml
    - name: broker-access.clusterrole.yaml
      apply: "{{ state == 'present' or (state == 'absent' and (broker_destroy_shared_resources | bool)) }}"
    - name: broker-auth.secret.yaml
      apply: "{{ True if broker_basic_auth_enabled else False }}"
    - name: broker-user-auth.clusterrole.yaml
      apply: "{{ state == 'present' or (state == 'absent' and (broker_destroy_shared_resources | bool)) }}"
    - name: broker.deployment.yaml
    # Useful in the case we don't want to require the servicecatalog exist
    - name: broker.servicecatalog.yaml
      apply: "{{ ('servicecatalog.k8s.io' in lookup('k8s', cluster_info='api_groups')) | bool }}"

- name: Wait for broker
  when: state == 'present' and wait_for_broker
  block:
    - name: Wait for {{ broker_kind }} to become ready
      debug:
        msg: "Broker ready status: {{ service_broker_ready_status }}"
      retries: 60
      delay: 10
      until: service_broker_ready_status | length > 0 and service_broker_ready_status | first == "True"
  rescue:
    - name: Show {{ broker_kind }} from service catalog
      debug:
        var: service_broker_query

    - name: Show broker pod logs
      vars:
        pod: "{{ lookup('k8s', kind='Pod', label_selector='app=' + broker_name) }}"
      debug:
        var: pod

    - fail:
        msg: The service catalog never marked the broker as ready
